/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author wfgu
 */



#include <bits/stdc++.h>

class Task {
public:
	void solve(std::istream& in, std::ostream& out) {
		long long po2[63] = {1};
		for (int i = 1; i <= 60; ++i) {
			po2[i] = po2[i - 1] * 2LL;
		}

		int n, d;
		in >> n >> d;
		if (d == 0 || n <= 1) {
			out << 0 << std::endl;
		} else if (n <= d) {
			out << po2[n - 1] - 1 << std::endl;
		} else {
			long long left = po2[n - 1] - 1;
			long long right = 0;

			long long f[63];
			memset(f, 0, sizeof(f));
			for (int i = 0; i <= n - 1 - d; ++i) {
				f[i] = i;
			}
			for (int i = d + 2; i <= n - 1 - d; ++i) {
				f[i] = f[i - 1] + f[i - 1 - d] + 1;
			}

			right = f[n - 1 - d];
			out << left - right << std::endl;
		}

	}
};


int main() {
	Task solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
